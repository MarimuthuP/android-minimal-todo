apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

apply plugin: 'com.google.gms.google-services'

apply plugin: 'jacoco'

jacoco {
    toolVersion = '0.8.0'
}

//tasks.withType(Test) {
//    jacoco.includeNoLocationClasses = true
//}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ])
}
//project.afterEvaluate {
//    // Grab all build types and product flavors
//    def buildTypes = android.buildTypes.collect { type ->
//        type.name
//    }
//    def productFlavors = android.productFlavors.collect { flavor ->
//        flavor.name
//    }
//    // When no product flavors defined, use empty
//    if (!productFlavors) productFlavors.add('')
//    productFlavors.each { productFlavorName ->
//        buildTypes.each { buildTypeName ->
//            def sourceName, sourcePath
//            if (!productFlavorName) {
//                sourceName = sourcePath = "${buildTypeName}"
//            } else {
//                sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
//                sourcePath = "${productFlavorName}/${buildTypeName}"
//            }
//            def testTaskName = "test${sourceName.capitalize()}UnitTest"
//            // Create coverage task of form 'testFlavorTypeCoverage' depending on 'testFlavorTypeUnitTest'
//            task "${testTaskName}Coverage" (type:JacocoReport, dependsOn: "$testTaskName") {
//                group = "Reporting"
//                description = "Generate Jacoco coverage reports on the ${sourceName.capitalize()} build."
//                classDirectories = fileTree(
//                        dir: "${project.buildDir}/intermediates/classes/${sourcePath}",
//                        excludes: [
//                                '**/R.class',
//                                '**/R$*.class',
//                                '**/*$ViewInjector*.*',
//                                '**/*$ViewBinder*.*',
//                                '**/BuildConfig.*',
//                                '**/Manifest*.*'
//                        ]
//                )
//                def coverageSourceDirs = [
//                        "src/main/java",
//                        "src/$productFlavorName/java",
//                        "src/$buildTypeName/java"
//                ]
//                additionalSourceDirs = files(coverageSourceDirs)
//                sourceDirectories = files(coverageSourceDirs)
//                executionData = files("${project.buildDir}/jacoco/${testTaskName}.exec")
//                reports {
//                    xml.enabled = true
//                    html.enabled = true
//                }
//            }
//        }
//    }
//}


//project.tasks.create(
//        name: 'jacocoTestReport',
//        type: JacocoReport,
//        dependsOn: "test${capVariant}UnitTest"
//) {
//    def buildDir = project.buildDir
//
//    def coverageSourceDirs = [
//            "src/main/java",
//            "src/main/kotlin"
//    ]
//
//    def fileFilter = [
//            '**/R.class',
//            '**/R$*.class',
//            '**/*$ViewInjector*.*',
//            '**/*$ViewBinder*.*',
//            '**/BuildConfig.*',
//            '**/Manifest*.*'
//    ]
//
//    def javaClasses = fileTree(
//            dir: "$buildDir/intermediates/classes/$folder",
//            excludes: fileFilter
//    )
//    def kotlinClasses = fileTree(
//            dir: "$buildDir/tmp/kotlin-classes/$variant",
//            excludes: fileFilter
//    )
//
//    group = "Reporting"
//    description = "Generate Jacoco coverage reports for the ${project.name} with the " +
//            "$variant variant."
//    classDirectories = files([ javaClasses ], [ kotlinClasses ])
//    additionalSourceDirs = files(coverageSourceDirs)
//    sourceDirectories = files(coverageSourceDirs)
//    executionData = files("${project.buildDir}/jacoco/test${capVariant}UnitTest.exec")
//    reports {
//        xml.enabled = true
//        html.enabled = true
//    }
//}

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.cuongpm.todoapp"
        minSdkVersion 15
        targetSdkVersion 28
        versionCode VERSION_CODE as int
        versionName VERSION_NAME
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    dataBinding {
        enabled = true
    }

    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'

    // Android support
    implementation "com.android.support:appcompat-v7:$SUPPORT_PACKAGE_VERSION"
    implementation "com.android.support:design:$SUPPORT_PACKAGE_VERSION"
    implementation "com.android.support:support-v4:$SUPPORT_PACKAGE_VERSION"

    // Firebase
    implementation 'com.google.firebase:firebase-core:16.0.4'
    implementation 'com.google.firebase:firebase-auth:16.0.5'
    implementation 'com.google.android.gms:play-services-auth:16.0.1'

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$KOTLIN_VERSION"

    // Multidex
    implementation 'com.android.support:multidex:1.0.3'

    // Life cycle
    implementation "android.arch.lifecycle:extensions:$ARCH_VERSION"
    testImplementation "android.arch.core:core-testing:$ARCH_VERSION"
    kapt "android.arch.lifecycle:compiler:$ARCH_VERSION"

    // Room
    implementation "android.arch.persistence.room:runtime:$ARCH_VERSION"
    kapt "android.arch.persistence.room:compiler:$ARCH_VERSION"

    // Dagger2
    implementation "com.google.dagger:dagger:$DAGGER_VERSION"
    implementation "com.google.dagger:dagger-android:$DAGGER_VERSION"
    implementation "com.google.dagger:dagger-android-support:$DAGGER_VERSION"
    kapt "com.google.dagger:dagger-compiler:$DAGGER_VERSION"
    kapt "com.google.dagger:dagger-android-processor:$DAGGER_VERSION"

    // OkHttp and Retrofit
    implementation 'com.squareup.okhttp3:okhttp:3.11.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.11.0'
    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'
    implementation "com.squareup.retrofit2:converter-gson:2.4.0"

    // Stetho for network debugging
    implementation 'com.facebook.stetho:stetho:1.5.0'
    implementation 'com.facebook.stetho:stetho-okhttp3:1.5.0'

    // Glide
    implementation 'com.github.bumptech.glide:glide:4.8.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.8.0'

    // Testing
    testImplementation 'junit:junit:4.12'
    testImplementation "org.mockito:mockito-core:2.21.0"
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}
